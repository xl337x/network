//Mahdi Amin, Yazeed Ashraf
//135032,140982
#include <stdio.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#include <stdbool.h>
#include <ctype.h>
#define MAX_RESPONSE_SIZE 4096

bool hasSpace(const char* str) {
    while (*str) {
        if (isspace((unsigned char)*str))
            return true;
        str++;
    }
    return false;
}

int main(int argc, char* argv[]) {
    // Check for correct command-line arguments
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <Server IP> <Server Port>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int sockfd;
    struct sockaddr_in servaddr;

    // Create a socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket error");
        exit(EXIT_FAILURE);
    }

    // Initialize server address structure
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(atoi(argv[2])); // Port from command line argument

    // Convert IP address from string to binary form
    if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0) {
        perror("inet_pton error");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) == -1) {
        perror("connect error");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    char password[100];

    while (1) {
        // Get user input (password)
        printf("Enter your password (or 'done' to exit): ");
        if (fgets(password, sizeof(password), stdin) == NULL) {
            perror("fgets error");
            close(sockfd);
            exit(EXIT_FAILURE);
        }

        // Remove trailing newline character
        password[strcspn(password, "\n")] = '\0';

        // Check for spaces in the password
        if (hasSpace(password)) {
            printf("Password cannot contain spaces.\n");
            continue; // Prompt user to enter password again
        }

        // Send the password to the server
        if (write(sockfd, password, strlen(password)) == -1) {
            perror("write error");
            close(sockfd);
            exit(EXIT_FAILURE);
        }

        if (strcmp(password, "done") == 0) {
            printf("Exiting...\n");
            close(sockfd);
            break;
        }

        char response[MAX_RESPONSE_SIZE];
        int bytesRead;

        // Receive response from the server
        if ((bytesRead = read(sockfd, response, sizeof(response) - 1)) == -1) {
            perror("read error");
            close(sockfd);
            exit(EXIT_FAILURE);
        }
        else if (bytesRead == 0) {
            printf("Server connection closed.\n");
            close(sockfd);
            exit(EXIT_FAILURE);
        }

        response[bytesRead] = '\0';

        // Display the server's response
        printf("Server Response: %s\n", response);
    }

    return 0;
}
