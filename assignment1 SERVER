#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h> 
#include <unistd.h>

#define MAXLINE 1024

int main(int argc, char **argv) {
    int sockfd, n;
    char recvline[MAXLINE + 1];//adding 1 for null terminator '\0'
    struct sockaddr_in servaddr;
/*compilation stuff*/
    if (argc != 3)//{3 Argument are: ip and the string name and the same file}
	{
        printf("Usage: %s <IPaddress> + <Name>\n\n eg: %s 10.242.20.114 Mahdi\n\n", argv[0], argv[0]);//argv[0] is the proggram name to execute the error message
        exit(1);
    	}
/*Socket Setup	*/
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
//first zero make the OS choose the suite protocol as argument ,Second zero is for the if condition
	{
      printf ("socket error");
        exit(1);
	}

/* Fill in the IP and Port into an Internet socket address structure (structure variables named servaddr and sockaddr_in) */
 /* 1.  Use bzero to clear the structure  */
    bzero(&servaddr, sizeof(servaddr));

/* 2. Set the address family to AF_INET which it will use IPv4*/
    servaddr.sin_family = AF_INET;

 /* 3. set port */
    servaddr.sin_port = htons(10013); /* Use port number 10013 */

 /* 4. set the IP */
    if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0)
//inet_pton=take the ip address as human format then convert it to binary
	{
        printf("inet_pton error");
        exit(1);
        }

/* Establish a connection to the server */
    if (connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0)
    {
        printf("connect error");
        exit(1);
    }

    // write name to pass it to the server
const char *stringname = argv[2];//argv[0]=NameOfFile,argv[1]=IpString,argv[2]=StringName

    write(sockfd,stringname,strlen(stringname));//write built-in "libc" function used for writing data to file descritor as our socket in this code


/* Read and output server response */
    /* Use the read function to read the server response and use the standard output fputs output structure */
    while ((n = read(sockfd, recvline, MAXLINE)) > 0)
	{
        recvline[n] = '\0';
		 /* null terminate */
        if (fputs(recvline, stdout) == EOF)//EOF:end of file
	{
            printf("fputs error");
            exit(1);
        }
    }

    if (n < 0) {
        printf("read error");
        exit(1);
    }
//Close socket connection
    close(sockfd);
    exit(0);
}
