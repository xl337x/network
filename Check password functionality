#include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool isCharOfType(char c, int type) {
    switch (type) {
        case 1: // Uppercase
            return c >= 'A' && c <= 'Z';
        case 2: // Lowercase
            return c >= 'a' && c <= 'z';
        case 3: // Digit
            return c >= '0' && c <= '9';
        case 4: // Special character
            return c == '!' || c == '@' || c == '#';
        default:
            return false;
    }
}

bool isPasswordValid(const char* password) {
    int length = strlen(password);
    int categoryCount = 0; // To track the number of fulfilled categories

    char errorMessages[400]; // Increased size for error messages
    strcpy(errorMessages, "The password is not acceptable. Please include:\n");

    if (length < 8 || length > 16) {
        strcat(errorMessages, "Violation 1: Be 8-16 characters in length\n");
    }

    // Check for character categories
    for (int type = 1; type <= 4; type++) {
        for (int i = 0; i < length; i++) {
            char c = password[i];
            if (isCharOfType(c, type)) {
                categoryCount++;
                break; // Move to the next category
            }
        }
    }

    // Check if at least three categories are fulfilled
    if (categoryCount < 3) {
        strcat(errorMessages, "Violation 2: Include characters from at least three of the following four categories:\n");
        strcat(errorMessages, "a. Uppercase alphabet characters (A-Z)\n");
        strcat(errorMessages, "b. Lowercase alphabet characters (a-z)\n");
        strcat(errorMessages, "c. Numeric characters (0-9)\n");
        strcat(errorMessages, "d. Any of the following special characters (!@#)\n");
    }

    if (length < 8 || length > 16 || categoryCount < 3) {
        printf("%s", errorMessages);
        return false;
    }

    // Password is valid if it reaches this point
    printf("The password is acceptable.\n");
    return true;
}

void checkPassword() {
    char password[50]; // Increased size for longer passwords

    while (1) {
        printf("Enter your password: ");
        fgets(password, sizeof(password), stdin);
        password[strcspn(password, "\n")] = '\0'; // Remove the newline character

        if (strcmp(password, "done") == 0) {
            break;
        }

        isPasswordValid(password);
    }
}

int main() {
    checkPassword();
    return 0;
}
